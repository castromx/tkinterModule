import tkinter as tk
from random import shuffle
from tkinter.messagebox import showinfo, showerror

# –°–ª–æ–≤–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —Ç–µ–∫—Å—Ç—É, 
# —è–∫–∏–π –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –≥—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ–Ω, —â–æ –æ—Ç–æ—á—É—é—Ç—å —Ü—é –∫–Ω–æ–ø–∫—É
colors = {
    1: 'blue',
    2: 'green',
    3: 'red',
    4: 'yellow',
    5: 'purple',
    6: 'orange',
    7: '#003366',
    8: '#FF66FF',
}

# –ü–µ—Ä–µ–æ–ø—Ä–∏–¥—ñ–ª–∏–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–Ω–æ–ø–∫–∏ Button, —â–æ–± —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ø–µ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å (–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è __str__)
# —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–¥
class MyButton(tk.Button):
    def __init__(self, master, x, y, number=0, *args, **kwargs):
        super(MyButton, self).__init__(master, width=3, font='Calibri 15 bold', *args, **kwargs)
        self.x = x
        self.y = y
        self.number = number
        self.is_mine = False
        self.count_bomb = 0
        self.is_open = False

    def __repr__(self):
        return f'MyButton {self.x} {self.y} {self.number} {self.is_mine}'


class MineSweeper:
    window = tk.Tk()
    photo = tk.PhotoImage(file='icon.png')
    window.iconphoto(False, photo)
    window.title('–°–∞–ø–µ—Ä')
    ROW = 12
    COLUMNS = 16
    MINES = 25
    IS_GAME_OVER = False
    IS_FIRST_CLICK = True
    marked_mines = 0
    elapsed_time = 0 # –ß–∞—Å –≥—Ä–∏, —â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É —É –º–µ—Ç–æ–¥—ñ start_timer

    def __init__(self):
        self.buttons = []
        self.marked_mines = 0
        self.elapsed_time = 0
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        for i in range(MineSweeper.ROW + 2):
            temp = []
            for j in range(MineSweeper.COLUMNS + 2):
                btn = MyButton(MineSweeper.window, x=i, y=j)
                btn.config(command=lambda button=btn: self.click(button))
                btn.bind('<Button-3>', self.right_click)
                temp.append(btn)
            self.buttons.append(temp)

    def update_marked_mines_label(self):
        self.marked_mines_label.config(text=f"–í—ñ–¥–º—ñ—á–µ–Ω—ñ –º—ñ–Ω–∏: {self.marked_mines}")

    def update_elapsed_time_label(self):
        self.elapsed_time_label.config(text=f"–ß–∞—Å: {self.elapsed_time} —Å–µ–∫")

    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª—ñ–∫—É –º–∏—à–∫–∏ (–¥–æ–¥–∞—î –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, –∞–±–æ –∑–Ω—ñ–º–∞—î —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º –±—É–≤)
    def right_click(self, event):
        if MineSweeper.IS_GAME_OVER:
            return
        cur_btn = event.widget
        if cur_btn['state'] == 'normal':
            cur_btn['state'] = 'disabled'
            cur_btn['text'] = 'üö©'
            cur_btn['disabledforeground'] = 'red'
            self.marked_mines += 1
        elif cur_btn['text'] == 'üö©':
            cur_btn['text'] = ''
            cur_btn['state'] = 'normal'
            self.marked_mines -= 1
        self.update_marked_mines_label()

    def start_timer(self):
        if not MineSweeper.IS_GAME_OVER:
            self.elapsed_time += 1
            self.update_elapsed_time_label()
            self.window.after(1000, self.start_timer)


    # –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤:
    # –î–ª—è –ø–æ—á–∞—Ç–∫—É, —è–∫—â–æ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞, —Ç–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è

    # –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –∫–ª—ñ–∫, —Ç–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –ø–æ–ª–µ —Ç–∞–∫, —â–æ–± –ø–µ—Ä—à–∏–π –∫–ª—ñ–∫ '–Ω–µ –ø–æ–ø–∞–≤' –Ω–∞ –±–æ–º–±—É

    # –Ø–∫—â–æ –∫–Ω–æ–ø–∫–∞, —è–∫–∞ –Ω–∞–∂–∞–≤ –≥—Ä–∞–≤–µ—Ü—å –±—É–ª–∞ –º—ñ–Ω–æ—é, —Ç–æ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è

    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ —î –º—ñ–Ω–æ—é, —Ç–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ö–æ–¥—É –≤ —à–∏—Ä–∏–Ω—É
    # —è–∫–∏–π –ø–æ–∫–∞–∑—É—î –∫-—Ç—å –º—ñ–Ω, –ø–æ–±–ª–∏–∑—É, —è–∫—â–æ –≤–æ–Ω–∏ —î, —Ç–∞ —Ä–æ–±–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–≤–Ω–æ—é –¥–ª—è –Ω–∞–∂–∞—Ç—Ç—è, —Ç–∞ –≤—Ä–µ—à—Ç—ñ —Ä–µ—à—Ç 
    # –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∏–≥—Ä–∞–≤ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –∫–æ–¥—É, —è–∫—â–æ –Ω—ñ, —Ç–æ –≥—Ä–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è
    def click(self, clicked_button: MyButton):
        if MineSweeper.IS_GAME_OVER:
            return

        if MineSweeper.IS_FIRST_CLICK:
            self.insert_mines(clicked_button.number)
            self.count_mines_in_buttons()
            self.print_buttons()
            MineSweeper.IS_FIRST_CLICK = False

        if clicked_button.is_mine:
            clicked_button.config(text='*', background='red', disabledforeground='black')
            clicked_button.is_open = True
            MineSweeper.IS_GAME_OVER = True
            showinfo('Game over', '–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏')
            for i in range(1, MineSweeper.ROW + 1):
                for j in range(1, MineSweeper.COLUMNS + 1):
                    btn = self.buttons[i][j]
                    if btn.is_mine:
                        btn['text'] = '*'
        else:
            color = colors.get(clicked_button.count_bomb, 'black')
            clicked_button.config(text=clicked_button.count_bomb, disabledforeground=color)
            if clicked_button.count_bomb:
                clicked_button.config(text=clicked_button.count_bomb, disabledforeground=color)
                clicked_button.is_open = True
            else:
                self.breadth_first_search(clicked_button)
        clicked_button.config(state='disabled')
        clicked_button.config(relief=tk.SUNKEN)
        self.check_game_finished()

    # –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ö–æ–¥—É –≤ —à–∏—Ä–∏–Ω—É
    def breadth_first_search(self, btn: MyButton):
        # –°—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–≥—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏
        quene = [btn]
        while quene:
        # –í–∏–π–º–∞—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ —á–µ—Ä–≥–∏
            cur_btn = quene.pop()
        
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ–Ω –Ω–∞–≤–∫–æ–ª–æ
            color = colors.get(cur_btn.count_bomb, 'black')
        
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ–Ω –Ω–∞–≤–∫–æ–ª–æ
            if cur_btn.count_bomb:
                cur_btn.config(text=cur_btn.count_bomb, disabledforeground=color)
            else:
                cur_btn.config(text='', disabledforeground=color)
        
            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–Ω–æ–ø–∫—É —è–∫ –≤—ñ–¥–∫—Ä–∏—Ç—É
            cur_btn.is_open = True
        
            # –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É (—Ä–æ–±–∏–º–æ —ó—ó –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é)
            cur_btn.config(state='disabled')
        
            # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
            cur_btn.config(relief=tk.SUNKEN)

            # –Ø–∫—â–æ –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ—á–Ω–æ—ó –∫–Ω–æ–ø–∫–∏ –Ω–µ–º–∞—î –º—ñ–Ω, —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ —ó—ó —Å—É—Å—ñ–¥—ñ–≤
            if cur_btn.count_bomb == 0:
                x, y = cur_btn.x, cur_btn.y
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        next_btn = self.buttons[x + dx][y + dy]
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—É—Å—ñ–¥–Ω—è –∫–Ω–æ–ø–∫–∞ —â–µ –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —ñ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î –∑–∞ –º–µ–∂–∞–º–∏ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
                        if not next_btn.is_open and 1 <= next_btn.x <= MineSweeper.ROW and \
                                1 <= next_btn.y <= MineSweeper.COLUMNS and next_btn not in quene:
                            # –î–æ–¥–∞—î–º–æ —Å—É—Å—ñ–¥–Ω—é –∫–Ω–æ–ø–∫—É –≤ —á–µ—Ä–≥—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏
                            quene.append(next_btn)

    # –ú–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç—Ç—ñ –∫–æ–ø–Ω–∫–∏ '–ì—Ä–∞—Ç–∏' —É –º–µ–Ω—é
    def reload(self):
        # –¢—É—Ç –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –º–µ—Ç–æ–¥ destroy() –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤—ñ–∫–Ω–∞
        [child.destroy() for child in self.window.winfo_children()]
        self.__init__()
        # –¢–∞ –ø–µ—Ä–µ–æ–ø—Ä–∏–¥—ñ–ª—è—î—Ç—å—Å—è –≤—ñ–∫–Ω–æ, —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–µ
        self.create_widgets()
        MineSweeper.IS_FIRST_CLICK = True
        MineSweeper.IS_GAME_OVER = False

    # –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏
    def create_settings_window(self):
        win_settings = tk.Toplevel(self.window)
        win_settings.wm_title('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')

        tk.Label(win_settings, text='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥—ñ–≤').grid(row=0, column=0)
        row_entry = tk.Entry(win_settings)
        row_entry.insert(0, MineSweeper.ROW)
        row_entry.grid(row=0, column=1, padx=20, pady=20)

        tk.Label(win_settings, text='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫').grid(row=1, column=0)
        column_entry = tk.Entry(win_settings)
        column_entry.insert(0, MineSweeper.COLUMNS)
        column_entry.grid(row=1, column=1, padx=20, pady=20)
        
        tk.Label(win_settings, text='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω').grid(row=2, column=0)
        mines_entry = tk.Entry(win_settings)
        mines_entry.insert(0, MineSweeper.MINES)
        mines_entry.grid(row=2, column=1, padx=20, pady=20)

        save_btn = tk.Button(win_settings, text='–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏',
                             command=lambda: self.change_settings(row_entry, column_entry, mines_entry))
        save_btn.grid(row=3, column=0, columnspan=2, padx=20, pady=20)

    # –¢–∞–∫ —è–∫ –≤–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–∏–º–∏, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ó—Ö –≤ int,
    # –∞ —è–∫—â–æ —Ü–µ –Ω–µ –º–æ–∂–ª–∏–≤–æ, —Ç–æ –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫—É
    # –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –≤ —á–∏—Å–ª–∞,
    # –≤—Å—Ç–∞–≤–ª—è—é—á–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –∫–ª–∞—Å—É MineSweeper –∑–Ω–∞—á–µ–Ω–Ω—è, –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –≥—Ä—É
    def change_settings(self, row: tk.Entry, column: tk.Entry, mines: tk.Entry):
        try:
            int(row.get()), int(column.get()), int(mines.get())
        except ValueError:
            showerror('–ü–æ–º–∏–ª–∫–∞', '–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è')
            return

        MineSweeper.ROW = int(row.get())
        MineSweeper.COLUMNS = int(column.get())
        MineSweeper.MINES = int(mines.get())
        self.reload()

    # –û—Å–Ω–æ–≤–Ω—ñ –≤—ñ–¥–∂–µ—Ç–∏ –≥—Ä–∏
    def create_widgets(self):
        
        # –ú–µ–Ω—é
        menubar = tk.Menu(self.window)
        self.window.config(menu=menubar)

        setting_menu = tk.Menu(menubar, tearoff=0)
        setting_menu.add_command(label='–ì—Ä–∞—Ç–∏', command=self.reload)
        setting_menu.add_command(label='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', command=self.create_settings_window)
        setting_menu.add_command(label='–í–∏—Ö—ñ–¥', command=self.window.destroy)
        menubar.add_cascade(label='–ú–µ–Ω—é', menu=setting_menu)

        # –†–æ–∑—Ç–∞—à–æ–≤—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        count = 1

        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                btn = self.buttons[i][j]
                btn.number = count
                btn.grid(row=i, column=j, stick='NWES')
                count += 1

        for i in range(1, MineSweeper.ROW + 1):
            tk.Grid.rowconfigure(self.window, i, weight=1)

        for i in range(1, MineSweeper.COLUMNS + 1):
            tk.Grid.columnconfigure(self.window, i, weight=1)
        
        # –ë—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –§—Ä–µ–π–º (–Ω–∏–∂–Ω—è –ø–æ–ª–æ—Å–∫–∞ –ø—ñ–¥ –∫–Ω–æ–ø–∫–∞–º–∏), —è–∫ –æ–∫—Ä–µ–º–∏–π –≤—ñ–¥–¥—ñ–ª –≤—ñ–∫–Ω–∞, —â–æ–± —Ç–µ–∫—Å—Ç –≤–ø–ª–∏–≤–∞–≤ –Ω–∞ —à–∏—Ä–∏–Ω—É —Å–∞–º–æ–≥–æ –≤—ñ–∫–Ω–∞
        self.info_frame = tk.Frame(self.window)
        self.info_frame.grid(row=MineSweeper.ROW + 2, column=1, columnspan=MineSweeper.COLUMNS, padx=10, pady=10, sticky='w')

        self.marked_mines_label = tk.Label(self.info_frame, text="–í–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –≤—ñ–¥–º—ñ—á–∞–ª–∏ –º—ñ–Ω–∏")
        self.marked_mines_label.grid(row=0, column=0, padx=10)

        self.elapsed_time_label = tk.Label(self.info_frame, text="–ß–∞—Å: 0 —Å–µ–∫")
        self.elapsed_time_label.grid(row=0, column=1, padx=10)

    
    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—å –ø–æ –≤—Å—ñ—Ö –∫–Ω–æ–ø–∫–∞—Ö, —Ç–∞ —Ä–æ–±–∏–º–æ —ó—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏, —É —Ä–∞–∑—ñ –≤–∏–≥—Ä–∞—à—É, –∞–±–æ –ø—Ä–æ–≥—Ä–∞—à—É
    def open_all_buttons(self):
        for i in range(MineSweeper.ROW + 2):
            for j in range(MineSweeper.COLUMNS + 2):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    btn.config(text='*', background='red', disabledforeground='black')
                elif btn.count_bomb in colors:
                    color = colors.get(btn.count_bomb, 'black')
                    btn.config(text=btn.count_bomb, fg=color)

    # –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–æ–±—Ç–æ –±—É–ª–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏, –æ–∫—Ä—ñ–º –º—ñ–Ω
    def check_game_finished(self):
        all_opened = True
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                btn = self.buttons[i][j]
                if not btn.is_mine and not btn.is_open:
                    all_opened = False
                    break
        if all_opened:
            self.open_all_buttons()
            showinfo('Game Over', '–í–∏ –≤–∏–≥—Ä–∞–ª–∏! –í—ñ—Ç–∞—î–º–æ!')
            MineSweeper.IS_GAME_OVER = True

    def start(self):
        self.create_widgets()
        self.start_timer()
        MineSweeper.window.mainloop()

    # –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    def print_buttons(self):
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    print('B', end=' ')
                else:
                    print(btn.count_bomb, end=' ')
            print()

    # –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª—ñ–∑–æ–≤—É—î '–≤—Å—Ç–∞–≤–∫—É' –º—ñ–Ω –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∫–ª—ñ–∫—É,
    # —Ç–∞ –∑–∞–ø–∏—Å—É—î –≤ –∞—Ç—Ä–∏–±—É—Ç is_mine —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–Ω–æ–ø–∫—É MyButton
    def insert_mines(self, number: int):
        index_mines = self.get_mines_places(number)
        print(index_mines)
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                btn = self.buttons[i][j]
                if btn.number in index_mines:
                    btn.is_mine = True

    # –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª—ñ–∑—É—î —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ–Ω, —è–∫—ñ –æ—Ç–æ—á—É—é—Ç—å –∫–æ–∂–Ω—É –∫–Ω–æ–ø–∫—É –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ, —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤ –∞—Ç—Ä–∏–±—É—Ç count_bomb –∫–ª–∞—Å—É MyButton
    def count_mines_in_buttons(self):
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                count = 0
                btn = self.buttons[i][j]
                # –¢—É—Ç –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—å –ø–æ —Å—É—Å—ñ–¥–∞–º –∑—ñ –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        if self.buttons[i + dx][j + dy].is_mine:
                            count += 1
                btn.count_bomb = count

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –º—ñ–Ω –Ω–∞ –ø–æ–ª—ñ (–∑–æ–∫—Ä–µ–º–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ –Ω–µ –±—É–ª–∞ –Ω–∞–∫–ª–∞–¥–∫–∞ –º—ñ–Ω)
    def get_mines_places(self, number: int) -> list:
        lst = [i for i in range(1, MineSweeper.ROW * MineSweeper.COLUMNS + 1)]
        lst.remove(number)
        shuffle(lst)
        return lst[:MineSweeper.MINES]


if __name__ == '__main__':
    minesweeper = MineSweeper()
    minesweeper.start()
